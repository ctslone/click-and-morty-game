{"version":3,"sources":["Components/Nav/index.js","Components/Wrapper/index.js","Components/Container/index.js","Components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","status","score","topscore","Wrapper","children","Container","Card","onClick","handleClick","id","clicked","key","src","url","alt","App","state","data","beenClicked","i","length","j","Math","floor","random","setState","concat","includes","alert","this","map","character","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w0BA6BeA,MA1Bf,SAAaC,GAET,OACI,6BACI,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SACV,uBAAGC,KAAK,KAAR,oBAEJ,4BAAKF,EAAMG,QACX,sCAAYH,EAAMI,MAAlB,iBAAuCJ,EAAMK,YAIrD,yBAAKJ,UAAU,8CACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,oCAAd,mBACA,uBAAGA,UAAU,oBAAb,gF,MCbLK,MAJf,SAAiBN,GACf,OAAO,6BAAMA,EAAMO,W,MCQNC,MATf,SAAmBR,GAEf,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,8BAA8BD,EAAMO,YCIhDE,G,MARF,SAACT,GACV,OACI,yBAAKC,UAAU,6BACX,yBAAKS,QAAS,kBAAMV,EAAMW,YAAYX,EAAMY,KAAKC,QAASb,EAAMa,QAASC,IAAKd,EAAMY,GAAIA,GAAIZ,EAAMY,GAAIG,IAAKf,EAAMgB,IAAKf,UAAU,eAAegB,IAAI,W,OC8EhJC,G,iNAxEbC,MAAQ,CACNC,KAAMA,EACNhB,MAAO,EACPC,SAAU,EACVgB,YAAa,GACblB,OAAQ,iC,EAGVQ,YAAc,SAAAC,GAGZ,IAAK,IAAIU,EAAI,EAAKH,MAAMC,KAAKG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADS,EAER,CAAC,EAAKH,MAAMC,KAAKI,GAAI,EAAKL,MAAMC,KAAKE,IAA/E,EAAKH,MAAMC,KAAKE,GAFkC,KAE9B,EAAKH,MAAMC,KAAKI,GAFc,KAInD,EAAKI,SAAS,CACZR,KAAM,EAAKD,MAAMC,OAIrB,EAAKQ,SAAS,CACZP,YAAa,EAAKF,MAAME,YAAYQ,OAAOjB,KAG1C,EAAKO,MAAME,YAAYS,SAASlB,GACjC,EAAKgB,SAAS,CACZxB,MAAO,EACPiB,YAAa,GACblB,OAAQ,gBAKV,EAAKyB,SAAS,CACZxB,MAAO,EAAKe,MAAMf,MAAQ,EAC1BD,OAAQ,gBAEN,EAAKgB,MAAMf,OAAS,EAAKe,MAAMd,UACjC,EAAKuB,SAAS,CACZvB,SAAU,EAAKc,MAAMd,SAAU,IAGV,KAArB,EAAKc,MAAMf,OACb2B,MAAM,kD,wEAKF,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACE5B,OAAQ6B,KAAKb,MAAMhB,OACnBC,MAAO4B,KAAKb,MAAMf,MAClBC,SAAU2B,KAAKb,MAAMd,WAEvB,kBAAC,EAAD,KACG2B,KAAKb,MAAMC,KAAKa,KAAK,SAAAC,GAAS,OAC7B,kBAAC,EAAD,CACEpB,IAAKoB,EAAUtB,GACfA,GAAIsB,EAAUtB,GACdI,IAAKkB,EAAUlB,IACfH,QAASqB,EAAUrB,QACnBF,YAAa,EAAKA,uB,GAjEdwB,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31c37cce.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    // return <div className=\"wrapper\">{props.children}</div>;\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <ul>\n                    <li className=\"brand\">\n                        <a href=\"/\">Click-and-Morty</a>\n                    </li>\n                    <li>{props.status}</li>\n                    <li>Score: {props.score} | Top Score: {props.topscore}</li>\n                </ul>\n            </nav>\n\n            <div className=\"jumbotron jumbotron-fluid rickandmortytron\">\n                <div className=\"container\">\n                    <h1 className=\"display-4 text-center main-title\">Click and Morty</h1>\n                    <p className=\"lead text-center\">Click on an image to earn points, but don't click on any more than once!</p>\n                </div>\n            </div>\n            \n        </div>\n\n    )\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div>{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n    // return <div className=\"wrapper\">{props.children}</div>;\n    return (\n        <div className=\"container\">\n            <div className=\"row justify-content-center\">{props.children}</div>\n        </div>\n    )\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = (props) => {\n    return (\n        <div className=\"card col-2 ml-3 mr-3 mb-3\">\n            <img onClick={() => props.handleClick(props.id)} clicked={props.clicked} key={props.id} id={props.id} src={props.url} className=\"card-img-top\" alt=\"...\" />\n        </div>\n    )\n}\n\nexport default Card;","import React, { Component } from \"react\";\nimport Nav from \"./Components/Nav\";\nimport Wrapper from \"./Components/Wrapper\";\nimport Container from \"./Components/Container\";\nimport Card from \"./Components/Card\";\nimport data from \"./data.json\"\n\n// import EventlyNav from \"./Components/EventlyNav\"\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    data: data,\n    score: 0,\n    topscore: 0,\n    beenClicked: [],\n    status: \"Click and character to begin!\"\n  }\n\n  handleClick = id => {\n    // console.log(\"clicked\", id)\n    // implementing fisher yates shuffle to get truly random array shuffle\n    for (let i = this.state.data.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.state.data[i], this.state.data[j]] = [this.state.data[j], this.state.data[i]];\n      // console.log(this.state.data)\n      this.setState({\n        data: this.state.data\n      })\n    }\n    // adding the clicked character id to the beenClicked array inside state\n    this.setState({\n      beenClicked: this.state.beenClicked.concat(id)\n    })\n    // if the beenClicked array includes the id of the character that was just clicked, you lose and the score goes to 0 and the beenClicked array resets to empty\n    if(this.state.beenClicked.includes(id)) {\n      this.setState({\n        score: 0,\n        beenClicked: [],\n        status: \"Game over!\"\n      })\n    }\n    // otherwise, it is a correct guess so increase the current score by one and the top score by one only once the current score is greater than or equal to the top score\n    else {\n      this.setState({\n        score: this.state.score + 1,\n        status: \"Keep it up!\"\n      })\n      if (this.state.score >= this.state.topscore) {\n        this.setState({\n          topscore: this.state.topscore +1\n        })\n      }\n      if (this.state.score === 11) {\n        alert(\"Great job! Yoy guessed correctly every time!\")\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav \n          status={this.state.status}\n          score={this.state.score}\n          topscore={this.state.topscore}\n        />\n        <Container>\n          {this.state.data.map( character => (\n            <Card \n              key={character.id}\n              id={character.id}\n              url={character.url}\n              clicked={character.clicked}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </Container>\n      </Wrapper>\n  )}}\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}